# Cursor IDE "God Mode" Configuration
# This file serves as the central instruction set for Cursor AI to operate in "God Mode"

## CORE BEHAVIOR
- Always approach tasks with a first-principles thinking mindset.
- Break down complex problems into manageable components.
- Consider edge cases and potential failure modes in all solutions.
- Strive for clean, maintainable, and efficient code.
- Follow DRY (Don't Repeat Yourself) principles.
- Prioritize readability and maintainability over clever code.

## MEMORY MANAGEMENT
- After each significant code change, update CURSOR_MEMORY.md with key architectural decisions.
- Reference CURSOR_MEMORY.md at the start of each coding session to maintain context.
- For project-wide context, reference project_structure.md to understand the codebase organization.
- Use learnings.md to record lessons and insights discovered during development.

## LOGGING SYSTEM
- After each code change, add a summarized entry to all_logs.md.
- Add detailed explanations to in_depth_logs.md and the relevant feature_log_<feature_name>.md.
- Log format should include: timestamp, files modified, and purpose of changes.
- For feature-specific work, maintain dedicated log files in the logs/ directory.
- When starting work on a new feature:
  1. Create a new feature log file based on logs/feature_log_template.md.
  2. Name it logs/feature_log_<feature_name>.md.
  3. Fill in the feature overview section at the bottom.
- When updating an existing feature:
  1. Add a new entry to both the summary and detailed sections of the relevant feature log.
  2. Include timestamp, files changed, and comprehensive explanations.

## AUTONOMOUS OPERATION
- When appropriate, run Git commands to commit and push changes:
  ```bash
  git add .
  git commit -m "[AI] <descriptive message about changes>"
  git push
  ```
- Before creating new files, check project_structure.md to avoid duplication.
- After creating or modifying files, update project_structure.md accordingly.
- Run tests after making significant changes to verify functionality.
- Follow this workflow for autonomous operation:
  1. Read and understand the task requirements
  2. Check existing code and documentation for context
  3. Plan the implementation approach
  4. Make necessary code changes
  5. Test the changes
  6. Update documentation
  7. Commit and push changes if appropriate

## CODE QUALITY
- Follow project-specific coding standards.
- Run linting and formatting tools before committing changes.
- Conduct self-review of generated code, identifying potential improvements.
- When fixing bugs, document the root cause in learnings.md.

## MANDATORY RESPONSE GOD MODE WORKFLOW

!!!CRITICAL!!! - YOU MUST FOLLOW THIS FORMAT FOR EVERY SINGLE RESPONSE WITHOUT EXCEPTION
FAILURE TO USE THE REQUIRED XML TAGS WILL BREAK THE ENTIRE GOD MODE SYSTEM

You MUST follow this exact step-by-step process for EVERY response:

1. ** INITIAL SETUP BEFORE RESPONDING **
   - Run script_prepare_response.sh to ensure all components are running

2. ** PROMPT ENHANCEMENT PROCESS **
   - Open and read prompt_enhanced.md
   - Read the "Current Enhanced Prompt" section at the top of the file
   - Take the user's verbatim message and add it to the end of the Version History
   - Create an enhanced version of the user's message with additional context
   - Update prompt_enhanced.md with:
     a. The enhanced version at the top in "Current Enhanced Prompt"
     b. The user's verbatim message and enhanced version at the bottom in Version History

3. ** ROADMAP REVIEW **
   - Review the current roadmap file
   - Identify tasks that have been completed based on the user's message
   - Identify new tasks that need to be added
   - Prepare updates for the roadmap

4. ** CREATING YOUR RESPONSE **
   - Use the enhanced prompt as the basis for your response
   - Structure your response using ONLY XML-STYLE TAGS with these required tags:
     <LOG_SUMMARY>Brief summary of changes</LOG_SUMMARY>
     <LOG_DETAIL>Detailed explanation of what was changed and why</LOG_DETAIL>
     <MEMORY_UPDATE>Key architectural decisions and context for future reference</MEMORY_UPDATE>
     <PROMPT_ENHANCEMENT>Analysis of previous user message and how to improve responses</PROMPT_ENHANCEMENT>
     <ROADMAP_UPDATE>Progress on existing tasks and identification of new tasks</ROADMAP_UPDATE>

   !!!IMPORTANT!!! - EVERY SINGLE RESPONSE MUST INCLUDE ALL OF THE ABOVE TAGS

   - Include these tags as appropriate:
     <FEATURE: FeatureName>Feature-specific updates</FEATURE: FeatureName>
     <DOC_UPDATE: DocumentType>Updates to project documentation</DOC_UPDATE: DocumentType>

   - For specialized memory updates, use as needed:
     <MEMORY_LEARNINGS>For insights and lessons learned</MEMORY_LEARNINGS>
     <MEMORY_ARCHITECTURE>For architecture changes</MEMORY_ARCHITECTURE>
     <MEMORY_REQUIREMENTS>For requirement changes</MEMORY_REQUIREMENTS>
     <MEMORY_ROADMAP>For roadmap updates</MEMORY_ROADMAP>
     <MEMORY_CONVENTIONS>For convention changes</MEMORY_CONVENTIONS>
     <MEMORY_DEPENDENCIES>For dependency changes</MEMORY_DEPENDENCIES>
     <MEMORY_GLOSSARY>For terminology updates</MEMORY_GLOSSARY>
     <MEMORY_TESTING>For testing updates</MEMORY_TESTING>
     <MEMORY_SECURITY>For security updates</MEMORY_SECURITY>
     <MEMORY_PERFORMANCE>For performance updates</MEMORY_PERFORMANCE>
     <MEMORY_ACCESSIBILITY>For accessibility updates</MEMORY_ACCESSIBILITY>

5. ** FINAL CHECK BEFORE SUBMITTING **
   - Review your response to ensure ALL required XML tags are present
   - Verify that ALL XML tags are properly closed
   - Confirm that you have not used any alternative tag formats (e.g., [TAG] instead of <TAG>)
   - If any required tags are missing, ADD THEM NOW before submitting your response

6. ** DOCUMENTATION UPDATES **
   - BEFORE finishing your response, you MUST:
   
   a) Update the features file:
      - Open memory_features.md
      - For each <FEATURE: FeatureName> tag in your response:
        - Check if the feature already exists in memory_features.md
        - If it doesn't exist, add a new section with a brief summary of the feature
        - If it exists, ensure the information is current and accurate
        - DO NOT duplicate existing feature entries
   
   b) Update the documentation files:
      - Ensure memory_documentation_summarized.md is current
      - Ensure memory_documentation_detailed.md is current
      - These files should be based on their respective templates
      - If significant changes were made to the system, update both files
        to reflect the latest architecture, components, and workflows

7. ** COMPLETING YOUR RESPONSE **
   - After completing steps 1-6, remind the user to run script_auto_commit.sh
   - Explain that this script will:
     a) Route all XML-tagged content verbatim to appropriate memory files
     b) Auto-commit all changes to Git
     c) Update prompt_enhanced.md with the latest analysis
     d) Update roadmap files with progress

## PROMPT ENHANCEMENT SYSTEM
- The <PROMPT_ENHANCEMENT> tag must include:
  1. Analysis of the user's previous message
  2. Identification of key requirements or questions
  3. Assessment of how well the previous AI response addressed the user's needs
  4. Improvement suggestions for future responses

- The content in prompt_enhanced.md MUST be structured as:
  - "Current Enhanced Prompt" at the top (latest version)
  - "Version History" below with all previous versions
  - Each version includes the user's verbatim message and your enhanced version
  - Automatic dating and timestamping

## VERBATIM CONTENT ROUTING
- All content within XML tags will be routed VERBATIM to appropriate files
- No interpretation or transformation of content is performed
- The entire user message is also copied to relevant files
- Each XML tag corresponds to a specific destination file:
  1. <LOG_SUMMARY> → memory_logs_all.md
  2. <LOG_DETAIL> → memory_logs_detailed.md
  3. <MEMORY_UPDATE> → MEMORY_CURSOR.md
  4. <FEATURE: Name> → memory_features.md
  5. <ROADMAP_UPDATE> → appropriate roadmap file
  6. <PROMPT_ENHANCEMENT> → prompt_enhanced.md
  7. Other specialized tags to their respective files

## FEATURE DOCUMENTATION SYSTEM
- When documenting features in memory_features.md:
  1. Use the exact feature name as the heading (### FeatureName)
  2. Provide a concise 2-3 sentence summary of what the feature does
  3. Focus on capabilities, not implementation details
  4. DO NOT duplicate existing feature entries
  5. If a feature already exists, only update it if your response adds new capabilities

## DOCUMENTATION SYSTEM
- The memory_documentation_summarized.md file should:
  1. Provide a high-level overview of the entire system
  2. Focus on core concepts and capabilities
  3. Be accessible to new users of the system
  4. Include key components and their interactions
  5. Be updated when significant changes are made to the system architecture

- The memory_documentation_detailed.md file should:
  1. Provide comprehensive details about all aspects of the system
  2. Include implementation details and technical specifications
  3. Serve as a reference for experienced users
  4. Document all components, workflows, and integration points
  5. Be updated when implementation details change

## ROADMAP TRACKING SYSTEM
- The <ROADMAP_UPDATE> tag must include:
  1. Recently completed tasks with:
     - Checkmarks [x] for completed items
     - Brief description of the work done
     - Files that were modified

  2. New/pending tasks with:
     - Unchecked boxes [ ] for pending items
     - Implementation approach
     - Files that need modification
     - Success criteria for completion

## EXAMPLE COMPLETE RESPONSE WITH XML-STYLE TAGS:

<LOG_SUMMARY>
Implemented JWT authentication with refresh token rotation and enhanced security.
</LOG_SUMMARY>

<LOG_DETAIL>
The authentication system has been updated to use JWT tokens with the following enhancements:

1. Added refresh token rotation for improved security
2. Implemented HttpOnly cookies for token storage
3. Added CSRF protection mechanisms
4. Created middleware for role-based access control

This approach improves security while maintaining good user experience.
</LOG_DETAIL>

<MEMORY_UPDATE>
The authentication system now uses JWT tokens with refresh rotation. Tokens are stored in HttpOnly cookies for XSS protection, and we've implemented CSRF protection measures.
</MEMORY_UPDATE>

<PROMPT_ENHANCEMENT>
The user requested enhanced security for the authentication system. Their message specifically mentioned concerns about token storage and CSRF vulnerabilities. 

My previous response didn't fully address CSRF protection, which is now implemented. For future responses, I should:
1. Be more thorough in addressing security concerns
2. Provide code examples when implementing security features
3. Explain the rationale behind security decisions
</PROMPT_ENHANCEMENT>

<ROADMAP_UPDATE>
## Completed Tasks:
- [x] **Implement JWT Authentication**: Added secure token-based authentication
  - Files Modified: `auth/jwt.ts`, `middleware/auth.ts`
  - Impact: Improved security and user session management

## New/Pending Tasks:
- [ ] **Add Rate Limiting**: Implement protection against brute force attacks
  - Implementation Approach: Use express-rate-limit middleware
  - Files to Modify: `server.ts`, `middleware/security.ts`
  - Success Criteria: Failed login attempts are limited to 5 per minute

- [ ] **Security Audit**: Conduct comprehensive review of auth implementation
  - Implementation Approach: Use OWASP guidelines to verify all security measures
  - Files to Review: All files in `auth/` and `middleware/` directories
  - Success Criteria: No critical or high vulnerabilities identified
</ROADMAP_UPDATE>

<FEATURE: Authentication>
Enhanced the authentication system with JWT tokens, refresh token rotation, and improved security measures. The implementation now uses HttpOnly cookies and includes CSRF protection.
</FEATURE: Authentication>

<MEMORY_SECURITY>
Authentication tokens are now stored in HttpOnly cookies instead of localStorage to prevent XSS attacks. Added CSRF protection with double-submit pattern.
</MEMORY_SECURITY>

## CRITICALLY IMPORTANT WORKFLOW INSTRUCTIONS:
1. Run script_prepare_response.sh BEFORE responding to the user
2. Read and use the enhanced prompt at the top of prompt_enhanced.md
3. Structure your response using XML-style tags EXACTLY as shown above
4. Update memory_features.md and documentation files BEFORE completing your response
5. Remind the user to run script_auto_commit.sh AFTER your response

## SELF-IMPROVEMENT
- Limit self-improvement iterations to 3 attempts before requesting human intervention.
- When faced with a new pattern or challenge, document it in learnings.md.
- Update this rules file as project needs evolve, with proper documentation of changes.

## EXTERNAL INTEGRATIONS
- Use @Web to search for documentation when needed.
- Use @Docs for project-specific documentation.
- Reference external documentation using standardized notation in comments.

## GRASSHOP PROJECT SPECIFICS
- This is the Grasshop project, a platform focused on learning and knowledge management.
- Key technologies include: React, Next.js, TypeScript, Supabase, and various modern web technologies.
- Follow TypeScript best practices, including proper typing and interface definitions.
- Consider mobile responsiveness in all UI implementations.



# Message Router Markers
All comprehensive responses that contain significant code changes, design decisions, 
or insights MUST include markup with appropriate markers for the message router:

1. Include a [LOG_SUMMARY] with a brief description of the changes (1-2 sentences).
2. Include a [LOG_DETAIL] with comprehensive explanation of the changes.
3. Include a [MEMORY_UPDATE] for relevant project context updates that should be remembered.
4. Use [FEATURE_LOG: FeatureName] for specific feature updates.
5. Use [DOC_UPDATE: project/feature/design/data] for documentation updates.
6. Use specific memory markers for specialized updates:
   - [MEMORY_LEARNINGS] - For insights and lessons learned
   - [MEMORY_ARCHITECTURE] - For architecture changes
   - [MEMORY_REQUIREMENTS] - For requirement changes
   - [MEMORY_ROADMAP] - For roadmap updates
   - [MEMORY_CONVENTIONS] - For convention changes
   - [MEMORY_DEPENDENCIES] - For dependency changes
   - [MEMORY_GLOSSARY] - For terminology updates
   - [MEMORY_TESTING] - For testing updates
   - [MEMORY_SECURITY] - For security updates
   - [MEMORY_PERFORMANCE] - For performance updates
   - [MEMORY_ACCESSIBILITY] - For accessibility updates
7. For efficiency, use [MULTI_TAG: TAG1, TAG2, ...] to route the same content to multiple destinations
   without repeating yourself. For example:
   
   [MULTI_TAG: LOG_SUMMARY, FEATURE_LOG: Authentication]
   Implemented JWT authentication with refresh token rotation.

These markers must be formatted exactly as shown (with square brackets) and must be placed
on their own lines, followed by the relevant content. This markup enables automatic 
documentation and persistent memory across sessions.

Example format:
[LOG_SUMMARY]
Brief summary of the changes in 1-2 sentences.

[LOG_DETAIL]
Detailed explanation of changes with markdown formatting.
- What was implemented
- Why it was done this way
- Any alternatives considered

[MEMORY_UPDATE]
Important architectural decisions or context that future sessions should be aware of.

Example with multi-tag:
[MULTI_TAG: MEMORY_UPDATE, MEMORY_ARCHITECTURE]
The system now uses a microservice architecture with service discovery.



# Message Router Markers
All comprehensive responses that contain significant code changes, design decisions, 
or insights MUST include markup with appropriate markers for the message router:

1. Include a [LOG_SUMMARY] with a brief description of the changes (1-2 sentences).
2. Include a [LOG_DETAIL] with comprehensive explanation of the changes.
3. Include a [MEMORY_UPDATE] for relevant project context updates that should be remembered.
4. Use [FEATURE_LOG: FeatureName] for specific feature updates.
5. Use [DOC_UPDATE: project/feature/design/data] for documentation updates.
6. Use specific memory markers for specialized updates:
   - [MEMORY_LEARNINGS] - For insights and lessons learned
   - [MEMORY_ARCHITECTURE] - For architecture changes
   - [MEMORY_REQUIREMENTS] - For requirement changes
   - [MEMORY_ROADMAP] - For roadmap updates
   - [MEMORY_CONVENTIONS] - For convention changes
   - [MEMORY_DEPENDENCIES] - For dependency changes
   - [MEMORY_GLOSSARY] - For terminology updates
   - [MEMORY_TESTING] - For testing updates
   - [MEMORY_SECURITY] - For security updates
   - [MEMORY_PERFORMANCE] - For performance updates
   - [MEMORY_ACCESSIBILITY] - For accessibility updates
7. For efficiency, use [MULTI_TAG: TAG1, TAG2, ...] to route the same content to multiple destinations
   without repeating yourself. For example:
   
   [MULTI_TAG: LOG_SUMMARY, FEATURE_LOG: Authentication]
   Implemented JWT authentication with refresh token rotation.

These markers must be formatted exactly as shown (with square brackets) and must be placed
on their own lines, followed by the relevant content. This markup enables automatic 
documentation and persistent memory across sessions.

Example format:
[LOG_SUMMARY]
Brief summary of the changes in 1-2 sentences.

[LOG_DETAIL]
Detailed explanation of changes with markdown formatting.
- What was implemented
- Why it was done this way
- Any alternatives considered

[MEMORY_UPDATE]
Important architectural decisions or context that future sessions should be aware of.

Example with multi-tag:
[MULTI_TAG: MEMORY_UPDATE, MEMORY_ARCHITECTURE]
The system now uses a microservice architecture with service discovery.



# Message Router Markers
All comprehensive responses that contain significant code changes, design decisions, 
or insights MUST include markup with appropriate markers for the message router:

1. Include a [LOG_SUMMARY] with a brief description of the changes (1-2 sentences).
2. Include a [LOG_DETAIL] with comprehensive explanation of the changes.
3. Include a [MEMORY_UPDATE] for relevant project context updates that should be remembered.
4. Use [FEATURE_LOG: FeatureName] for specific feature updates.
5. Use [DOC_UPDATE: project/feature/design/data] for documentation updates.
6. Use specific memory markers for specialized updates:
   - [MEMORY_LEARNINGS] - For insights and lessons learned
   - [MEMORY_ARCHITECTURE] - For architecture changes
   - [MEMORY_REQUIREMENTS] - For requirement changes
   - [MEMORY_ROADMAP] - For roadmap updates
   - [MEMORY_CONVENTIONS] - For convention changes
   - [MEMORY_DEPENDENCIES] - For dependency changes
   - [MEMORY_GLOSSARY] - For terminology updates
   - [MEMORY_TESTING] - For testing updates
   - [MEMORY_SECURITY] - For security updates
   - [MEMORY_PERFORMANCE] - For performance updates
   - [MEMORY_ACCESSIBILITY] - For accessibility updates
7. For efficiency, use [MULTI_TAG: TAG1, TAG2, ...] to route the same content to multiple destinations
   without repeating yourself. For example:
   
   [MULTI_TAG: LOG_SUMMARY, FEATURE_LOG: Authentication]
   Implemented JWT authentication with refresh token rotation.

These markers must be formatted exactly as shown (with square brackets) and must be placed
on their own lines, followed by the relevant content. This markup enables automatic 
documentation and persistent memory across sessions.

Example format:
[LOG_SUMMARY]
Brief summary of the changes in 1-2 sentences.

[LOG_DETAIL]
Detailed explanation of changes with markdown formatting.
- What was implemented
- Why it was done this way
- Any alternatives considered

[MEMORY_UPDATE]
Important architectural decisions or context that future sessions should be aware of.

Example with multi-tag:
[MULTI_TAG: MEMORY_UPDATE, MEMORY_ARCHITECTURE]
The system now uses a microservice architecture with service discovery.



# Message Router Markers
All comprehensive responses that contain significant code changes, design decisions, 
or insights MUST include markup with appropriate markers for the message router:

1. Include a [LOG_SUMMARY] with a brief description of the changes (1-2 sentences).
2. Include a [LOG_DETAIL] with comprehensive explanation of the changes.
3. Include a [MEMORY_UPDATE] for relevant project context updates that should be remembered.
4. Use [FEATURE_LOG: FeatureName] for specific feature updates.
5. Use [DOC_UPDATE: project/feature/design/data] for documentation updates.
6. Use specific memory markers for specialized updates:
   - [MEMORY_LEARNINGS] - For insights and lessons learned
   - [MEMORY_ARCHITECTURE] - For architecture changes
   - [MEMORY_REQUIREMENTS] - For requirement changes
   - [MEMORY_ROADMAP] - For roadmap updates
   - [MEMORY_CONVENTIONS] - For convention changes
   - [MEMORY_DEPENDENCIES] - For dependency changes
   - [MEMORY_GLOSSARY] - For terminology updates
   - [MEMORY_TESTING] - For testing updates
   - [MEMORY_SECURITY] - For security updates
   - [MEMORY_PERFORMANCE] - For performance updates
   - [MEMORY_ACCESSIBILITY] - For accessibility updates
7. For efficiency, use [MULTI_TAG: TAG1, TAG2, ...] to route the same content to multiple destinations
   without repeating yourself. For example:
   
   [MULTI_TAG: LOG_SUMMARY, FEATURE_LOG: Authentication]
   Implemented JWT authentication with refresh token rotation.

These markers must be formatted exactly as shown (with square brackets) and must be placed
on their own lines, followed by the relevant content. This markup enables automatic 
documentation and persistent memory across sessions.

Example format:
[LOG_SUMMARY]
Brief summary of the changes in 1-2 sentences.

[LOG_DETAIL]
Detailed explanation of changes with markdown formatting.
- What was implemented
- Why it was done this way
- Any alternatives considered

[MEMORY_UPDATE]
Important architectural decisions or context that future sessions should be aware of.

Example with multi-tag:
[MULTI_TAG: MEMORY_UPDATE, MEMORY_ARCHITECTURE]
The system now uses a microservice architecture with service discovery.



# Message Router Markers
All comprehensive responses that contain significant code changes, design decisions, 
or insights MUST include markup with appropriate markers for the message router:

1. Include a [LOG_SUMMARY] with a brief description of the changes (1-2 sentences).
2. Include a [LOG_DETAIL] with comprehensive explanation of the changes.
3. Include a [MEMORY_UPDATE] for relevant project context updates that should be remembered.
4. Use [FEATURE_LOG: FeatureName] for specific feature updates.
5. Use [DOC_UPDATE: project/feature/design/data] for documentation updates.
6. Use specific memory markers for specialized updates:
   - [MEMORY_LEARNINGS] - For insights and lessons learned
   - [MEMORY_ARCHITECTURE] - For architecture changes
   - [MEMORY_REQUIREMENTS] - For requirement changes
   - [MEMORY_ROADMAP] - For roadmap updates
   - [MEMORY_CONVENTIONS] - For convention changes
   - [MEMORY_DEPENDENCIES] - For dependency changes
   - [MEMORY_GLOSSARY] - For terminology updates
   - [MEMORY_TESTING] - For testing updates
   - [MEMORY_SECURITY] - For security updates
   - [MEMORY_PERFORMANCE] - For performance updates
   - [MEMORY_ACCESSIBILITY] - For accessibility updates
7. For efficiency, use [MULTI_TAG: TAG1, TAG2, ...] to route the same content to multiple destinations
   without repeating yourself. For example:
   
   [MULTI_TAG: LOG_SUMMARY, FEATURE_LOG: Authentication]
   Implemented JWT authentication with refresh token rotation.

These markers must be formatted exactly as shown (with square brackets) and must be placed
on their own lines, followed by the relevant content. This markup enables automatic 
documentation and persistent memory across sessions.

Example format:
[LOG_SUMMARY]
Brief summary of the changes in 1-2 sentences.

[LOG_DETAIL]
Detailed explanation of changes with markdown formatting.
- What was implemented
- Why it was done this way
- Any alternatives considered

[MEMORY_UPDATE]
Important architectural decisions or context that future sessions should be aware of.

Example with multi-tag:
[MULTI_TAG: MEMORY_UPDATE, MEMORY_ARCHITECTURE]
The system now uses a microservice architecture with service discovery.



# Message Router Markers
All comprehensive responses that contain significant code changes, design decisions, 
or insights MUST include markup with appropriate markers for the message router:

1. Include a [LOG_SUMMARY] with a brief description of the changes (1-2 sentences).
2. Include a [LOG_DETAIL] with comprehensive explanation of the changes.
3. Include a [MEMORY_UPDATE] for relevant project context updates that should be remembered.
4. Use [FEATURE_LOG: FeatureName] for specific feature updates.
5. Use [DOC_UPDATE: project/feature/design/data] for documentation updates.
6. Use specific memory markers for specialized updates:
   - [MEMORY_LEARNINGS] - For insights and lessons learned
   - [MEMORY_ARCHITECTURE] - For architecture changes
   - [MEMORY_REQUIREMENTS] - For requirement changes
   - [MEMORY_ROADMAP] - For roadmap updates
   - [MEMORY_CONVENTIONS] - For convention changes
   - [MEMORY_DEPENDENCIES] - For dependency changes
   - [MEMORY_GLOSSARY] - For terminology updates
   - [MEMORY_TESTING] - For testing updates
   - [MEMORY_SECURITY] - For security updates
   - [MEMORY_PERFORMANCE] - For performance updates
   - [MEMORY_ACCESSIBILITY] - For accessibility updates
7. For efficiency, use [MULTI_TAG: TAG1, TAG2, ...] to route the same content to multiple destinations
   without repeating yourself. For example:
   
   [MULTI_TAG: LOG_SUMMARY, FEATURE_LOG: Authentication]
   Implemented JWT authentication with refresh token rotation.

These markers must be formatted exactly as shown (with square brackets) and must be placed
on their own lines, followed by the relevant content. This markup enables automatic 
documentation and persistent memory across sessions.

Example format:
[LOG_SUMMARY]
Brief summary of the changes in 1-2 sentences.

[LOG_DETAIL]
Detailed explanation of changes with markdown formatting.
- What was implemented
- Why it was done this way
- Any alternatives considered

[MEMORY_UPDATE]
Important architectural decisions or context that future sessions should be aware of.

Example with multi-tag:
[MULTI_TAG: MEMORY_UPDATE, MEMORY_ARCHITECTURE]
The system now uses a microservice architecture with service discovery.



# Message Router Markers
All comprehensive responses that contain significant code changes, design decisions, 
or insights MUST include markup with appropriate markers for the message router:

1. Include a [LOG_SUMMARY] with a brief description of the changes (1-2 sentences).
2. Include a [LOG_DETAIL] with comprehensive explanation of the changes.
3. Include a [MEMORY_UPDATE] for relevant project context updates that should be remembered.
4. Use [FEATURE_LOG: FeatureName] for specific feature updates.
5. Use [DOC_UPDATE: project/feature/design/data] for documentation updates.
6. Use specific memory markers for specialized updates:
   - [MEMORY_LEARNINGS] - For insights and lessons learned
   - [MEMORY_ARCHITECTURE] - For architecture changes
   - [MEMORY_REQUIREMENTS] - For requirement changes
   - [MEMORY_ROADMAP] - For roadmap updates
   - [MEMORY_CONVENTIONS] - For convention changes
   - [MEMORY_DEPENDENCIES] - For dependency changes
   - [MEMORY_GLOSSARY] - For terminology updates
   - [MEMORY_TESTING] - For testing updates
   - [MEMORY_SECURITY] - For security updates
   - [MEMORY_PERFORMANCE] - For performance updates
   - [MEMORY_ACCESSIBILITY] - For accessibility updates
7. For efficiency, use [MULTI_TAG: TAG1, TAG2, ...] to route the same content to multiple destinations
   without repeating yourself. For example:
   
   [MULTI_TAG: LOG_SUMMARY, FEATURE_LOG: Authentication]
   Implemented JWT authentication with refresh token rotation.

These markers must be formatted exactly as shown (with square brackets) and must be placed
on their own lines, followed by the relevant content. This markup enables automatic 
documentation and persistent memory across sessions.

Example format:
[LOG_SUMMARY]
Brief summary of the changes in 1-2 sentences.

[LOG_DETAIL]
Detailed explanation of changes with markdown formatting.
- What was implemented
- Why it was done this way
- Any alternatives considered

[MEMORY_UPDATE]
Important architectural decisions or context that future sessions should be aware of.

Example with multi-tag:
[MULTI_TAG: MEMORY_UPDATE, MEMORY_ARCHITECTURE]
The system now uses a microservice architecture with service discovery.



# Message Router Markers
All comprehensive responses that contain significant code changes, design decisions, 
or insights MUST include markup with appropriate markers for the message router:

1. Include a [LOG_SUMMARY] with a brief description of the changes (1-2 sentences).
2. Include a [LOG_DETAIL] with comprehensive explanation of the changes.
3. Include a [MEMORY_UPDATE] for relevant project context updates that should be remembered.
4. Use [FEATURE_LOG: FeatureName] for specific feature updates.
5. Use [DOC_UPDATE: project/feature/design/data] for documentation updates.
6. Use specific memory markers for specialized updates:
   - [MEMORY_LEARNINGS] - For insights and lessons learned
   - [MEMORY_ARCHITECTURE] - For architecture changes
   - [MEMORY_REQUIREMENTS] - For requirement changes
   - [MEMORY_ROADMAP] - For roadmap updates
   - [MEMORY_CONVENTIONS] - For convention changes
   - [MEMORY_DEPENDENCIES] - For dependency changes
   - [MEMORY_GLOSSARY] - For terminology updates
   - [MEMORY_TESTING] - For testing updates
   - [MEMORY_SECURITY] - For security updates
   - [MEMORY_PERFORMANCE] - For performance updates
   - [MEMORY_ACCESSIBILITY] - For accessibility updates
7. For efficiency, use [MULTI_TAG: TAG1, TAG2, ...] to route the same content to multiple destinations
   without repeating yourself. For example:
   
   [MULTI_TAG: LOG_SUMMARY, FEATURE_LOG: Authentication]
   Implemented JWT authentication with refresh token rotation.

These markers must be formatted exactly as shown (with square brackets) and must be placed
on their own lines, followed by the relevant content. This markup enables automatic 
documentation and persistent memory across sessions.

Example format:
[LOG_SUMMARY]
Brief summary of the changes in 1-2 sentences.

[LOG_DETAIL]
Detailed explanation of changes with markdown formatting.
- What was implemented
- Why it was done this way
- Any alternatives considered

[MEMORY_UPDATE]
Important architectural decisions or context that future sessions should be aware of.

Example with multi-tag:
[MULTI_TAG: MEMORY_UPDATE, MEMORY_ARCHITECTURE]
The system now uses a microservice architecture with service discovery.



# Message Router Markers
All comprehensive responses that contain significant code changes, design decisions, 
or insights MUST include markup with appropriate markers for the message router:

1. Include a [LOG_SUMMARY] with a brief description of the changes (1-2 sentences).
2. Include a [LOG_DETAIL] with comprehensive explanation of the changes.
3. Include a [MEMORY_UPDATE] for relevant project context updates that should be remembered.
4. Use [FEATURE_LOG: FeatureName] for specific feature updates.
5. Use [DOC_UPDATE: project/feature/design/data] for documentation updates.
6. Use specific memory markers for specialized updates:
   - [MEMORY_LEARNINGS] - For insights and lessons learned
   - [MEMORY_ARCHITECTURE] - For architecture changes
   - [MEMORY_REQUIREMENTS] - For requirement changes
   - [MEMORY_ROADMAP] - For roadmap updates
   - [MEMORY_CONVENTIONS] - For convention changes
   - [MEMORY_DEPENDENCIES] - For dependency changes
   - [MEMORY_GLOSSARY] - For terminology updates
   - [MEMORY_TESTING] - For testing updates
   - [MEMORY_SECURITY] - For security updates
   - [MEMORY_PERFORMANCE] - For performance updates
   - [MEMORY_ACCESSIBILITY] - For accessibility updates
7. For efficiency, use [MULTI_TAG: TAG1, TAG2, ...] to route the same content to multiple destinations
   without repeating yourself. For example:
   
   [MULTI_TAG: LOG_SUMMARY, FEATURE_LOG: Authentication]
   Implemented JWT authentication with refresh token rotation.

These markers must be formatted exactly as shown (with square brackets) and must be placed
on their own lines, followed by the relevant content. This markup enables automatic 
documentation and persistent memory across sessions.

Example format:
[LOG_SUMMARY]
Brief summary of the changes in 1-2 sentences.

[LOG_DETAIL]
Detailed explanation of changes with markdown formatting.
- What was implemented
- Why it was done this way
- Any alternatives considered

[MEMORY_UPDATE]
Important architectural decisions or context that future sessions should be aware of.

Example with multi-tag:
[MULTI_TAG: MEMORY_UPDATE, MEMORY_ARCHITECTURE]
The system now uses a microservice architecture with service discovery.



# Message Router Markers
All comprehensive responses that contain significant code changes, design decisions, 
or insights MUST include markup with appropriate markers for the message router:

1. Include a [LOG_SUMMARY] with a brief description of the changes (1-2 sentences).
2. Include a [LOG_DETAIL] with comprehensive explanation of the changes.
3. Include a [MEMORY_UPDATE] for relevant project context updates that should be remembered.
4. Use [FEATURE_LOG: FeatureName] for specific feature updates.
5. Use [DOC_UPDATE: project/feature/design/data] for documentation updates.
6. Use specific memory markers for specialized updates:
   - [MEMORY_LEARNINGS] - For insights and lessons learned
   - [MEMORY_ARCHITECTURE] - For architecture changes
   - [MEMORY_REQUIREMENTS] - For requirement changes
   - [MEMORY_ROADMAP] - For roadmap updates
   - [MEMORY_CONVENTIONS] - For convention changes
   - [MEMORY_DEPENDENCIES] - For dependency changes
   - [MEMORY_GLOSSARY] - For terminology updates
   - [MEMORY_TESTING] - For testing updates
   - [MEMORY_SECURITY] - For security updates
   - [MEMORY_PERFORMANCE] - For performance updates
   - [MEMORY_ACCESSIBILITY] - For accessibility updates
7. For efficiency, use [MULTI_TAG: TAG1, TAG2, ...] to route the same content to multiple destinations
   without repeating yourself. For example:
   
   [MULTI_TAG: LOG_SUMMARY, FEATURE_LOG: Authentication]
   Implemented JWT authentication with refresh token rotation.

These markers must be formatted exactly as shown (with square brackets) and must be placed
on their own lines, followed by the relevant content. This markup enables automatic 
documentation and persistent memory across sessions.

Example format:
[LOG_SUMMARY]
Brief summary of the changes in 1-2 sentences.

[LOG_DETAIL]
Detailed explanation of changes with markdown formatting.
- What was implemented
- Why it was done this way
- Any alternatives considered

[MEMORY_UPDATE]
Important architectural decisions or context that future sessions should be aware of.

Example with multi-tag:
[MULTI_TAG: MEMORY_UPDATE, MEMORY_ARCHITECTURE]
The system now uses a microservice architecture with service discovery.



# Message Router Markers
All comprehensive responses that contain significant code changes, design decisions, 
or insights MUST include markup with appropriate markers for the message router:

1. Include a [LOG_SUMMARY] with a brief description of the changes (1-2 sentences).
2. Include a [LOG_DETAIL] with comprehensive explanation of the changes.
3. Include a [MEMORY_UPDATE] for relevant project context updates that should be remembered.
4. Use [FEATURE_LOG: FeatureName] for specific feature updates.
5. Use [DOC_UPDATE: project/feature/design/data] for documentation updates.
6. Use specific memory markers for specialized updates:
   - [MEMORY_LEARNINGS] - For insights and lessons learned
   - [MEMORY_ARCHITECTURE] - For architecture changes
   - [MEMORY_REQUIREMENTS] - For requirement changes
   - [MEMORY_ROADMAP] - For roadmap updates
   - [MEMORY_CONVENTIONS] - For convention changes
   - [MEMORY_DEPENDENCIES] - For dependency changes
   - [MEMORY_GLOSSARY] - For terminology updates
   - [MEMORY_TESTING] - For testing updates
   - [MEMORY_SECURITY] - For security updates
   - [MEMORY_PERFORMANCE] - For performance updates
   - [MEMORY_ACCESSIBILITY] - For accessibility updates
7. For efficiency, use [MULTI_TAG: TAG1, TAG2, ...] to route the same content to multiple destinations
   without repeating yourself. For example:
   
   [MULTI_TAG: LOG_SUMMARY, FEATURE_LOG: Authentication]
   Implemented JWT authentication with refresh token rotation.

These markers must be formatted exactly as shown (with square brackets) and must be placed
on their own lines, followed by the relevant content. This markup enables automatic 
documentation and persistent memory across sessions.

Example format:
[LOG_SUMMARY]
Brief summary of the changes in 1-2 sentences.

[LOG_DETAIL]
Detailed explanation of changes with markdown formatting.
- What was implemented
- Why it was done this way
- Any alternatives considered

[MEMORY_UPDATE]
Important architectural decisions or context that future sessions should be aware of.

Example with multi-tag:
[MULTI_TAG: MEMORY_UPDATE, MEMORY_ARCHITECTURE]
The system now uses a microservice architecture with service discovery.
