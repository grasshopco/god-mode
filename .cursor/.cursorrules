# Cursor IDE "God Mode" Configuration
# This file serves as the central instruction set for Cursor AI to operate in "God Mode"

## CORE BEHAVIOR
- Always approach tasks with a first-principles thinking mindset.
- Break down complex problems into manageable components.
- Consider edge cases and potential failure modes in all solutions.
- Strive for clean, maintainable, and efficient code.
- Follow DRY (Don't Repeat Yourself) principles.
- Prioritize readability and maintainability over clever code.

## MEMORY MANAGEMENT
- After each significant code change, update CURSOR_MEMORY.md with key architectural decisions.
- Reference CURSOR_MEMORY.md at the start of each coding session to maintain context.
- For project-wide context, reference project_structure.md to understand the codebase organization.
- Use learnings.md to record lessons and insights discovered during development.

## LOGGING SYSTEM
- After each code change, add a summarized entry to all_logs.md.
- Add detailed explanations to in_depth_logs.md and the relevant feature_log_<feature_name>.md.
- Log format should include: timestamp, files modified, and purpose of changes.
- For feature-specific work, maintain dedicated log files in the logs/ directory.
- When starting work on a new feature:
  1. Create a new feature log file based on logs/feature_log_template.md.
  2. Name it logs/feature_log_<feature_name>.md.
  3. Fill in the feature overview section at the bottom.
- When updating an existing feature:
  1. Add a new entry to both the summary and detailed sections of the relevant feature log.
  2. Include timestamp, files changed, and comprehensive explanations.

## AUTONOMOUS OPERATION
- When appropriate, run Git commands to commit and push changes:
  ```bash
  git add .
  git commit -m "[AI] <descriptive message about changes>"
  git push
  ```
- Before creating new files, check project_structure.md to avoid duplication.
- After creating or modifying files, update project_structure.md accordingly.
- Run tests after making significant changes to verify functionality.
- Follow this workflow for autonomous operation:
  1. Read and understand the task requirements
  2. Check existing code and documentation for context
  3. Plan the implementation approach
  4. Make necessary code changes
  5. Test the changes
  6. Update documentation
  7. Commit and push changes if appropriate

## CODE QUALITY
- Follow project-specific coding standards.
- Run linting and formatting tools before committing changes.
- Conduct self-review of generated code, identifying potential improvements.
- When fixing bugs, document the root cause in learnings.md.

## RESPONSE WORKFLOW AND MESSAGE TAGGING
- EVERY COMPREHENSIVE RESPONSE must follow this exact workflow:
  1. BEFORE responding, ensure the prepare_response.sh script has been run
  2. Structure your response using XML-STYLE TAGS ONLY (not bracket-style)
  3. AFTER completing your response, run the complete_response.sh script

- ALWAYS use the following XML-style tags in your responses:
  - <LOG_SUMMARY>Brief summary of changes</LOG_SUMMARY>
  - <LOG_DETAIL>Detailed explanation of what was changed and why</LOG_DETAIL>
  - <MEMORY_UPDATE>Key architectural decisions and context for future reference</MEMORY_UPDATE>
  
- For feature-specific work, include:
  - <FEATURE: FeatureName>Feature-specific updates</FEATURE: FeatureName>

- For documentation updates, include:
  - <DOC_UPDATE: DocumentType>Updates to project documentation</DOC_UPDATE: DocumentType>

- For specialized memory updates, use:
  - <MEMORY_LEARNINGS>For insights and lessons learned</MEMORY_LEARNINGS>
  - <MEMORY_ARCHITECTURE>For architecture changes</MEMORY_ARCHITECTURE>
  - <MEMORY_REQUIREMENTS>For requirement changes</MEMORY_REQUIREMENTS>
  - <MEMORY_ROADMAP>For roadmap updates</MEMORY_ROADMAP>
  - <MEMORY_CONVENTIONS>For convention changes</MEMORY_CONVENTIONS>
  - <MEMORY_DEPENDENCIES>For dependency changes</MEMORY_DEPENDENCIES>
  - <MEMORY_GLOSSARY>For terminology updates</MEMORY_GLOSSARY>
  - <MEMORY_TESTING>For testing updates</MEMORY_TESTING>
  - <MEMORY_SECURITY>For security updates</MEMORY_SECURITY>
  - <MEMORY_PERFORMANCE>For performance updates</MEMORY_PERFORMANCE>
  - <MEMORY_ACCESSIBILITY>For accessibility updates</MEMORY_ACCESSIBILITY>

- These XML-style tags clearly delineate the content for each tag, ensuring the exact content is routed to the correct files
- Each tag must have a matching closing tag containing the exact same tag name
- Content between the opening and closing tags will be saved verbatim to the corresponding files
- You can apply multiple different tags to the same content block if it's relevant to multiple categories

## EXAMPLE RESPONSE WITH XML-STYLE TAGS:

<LOG_SUMMARY>
Implemented JWT authentication with refresh token rotation and enhanced security.
</LOG_SUMMARY>

<LOG_DETAIL>
The authentication system has been updated to use JWT tokens with the following enhancements:

1. Added refresh token rotation for improved security
2. Implemented HttpOnly cookies for token storage
3. Added CSRF protection mechanisms
4. Created middleware for role-based access control

This approach improves security while maintaining good user experience.
</LOG_DETAIL>

<MEMORY_UPDATE>
The authentication system now uses JWT tokens with refresh rotation. Tokens are stored in HttpOnly cookies for XSS protection, and we've implemented CSRF protection measures.
</MEMORY_UPDATE>

<FEATURE: Authentication>
Enhanced the authentication system with JWT tokens, refresh token rotation, and improved security measures. The implementation now uses HttpOnly cookies and includes CSRF protection.
</FEATURE: Authentication>

<MEMORY_SECURITY>
Authentication tokens are now stored in HttpOnly cookies instead of localStorage to prevent XSS attacks. Added CSRF protection with double-submit pattern.
</MEMORY_SECURITY>

## CRITICALLY IMPORTANT WORKFLOW INSTRUCTIONS:
1. BEFORE responding to the user, ALWAYS run: ./script_prepare_response.sh
2. Structure your response using XML-style tags as shown above
3. AFTER completing your response, ALWAYS run: ./script_auto_commit.sh
4. At least once per session, update the project roadmap

## SELF-IMPROVEMENT
- Limit self-improvement iterations to 3 attempts before requesting human intervention.
- When faced with a new pattern or challenge, document it in learnings.md.
- Update this rules file as project needs evolve, with proper documentation of changes.

## EXTERNAL INTEGRATIONS
- Use @Web to search for documentation when needed.
- Use @Docs for project-specific documentation.
- Reference external documentation using standardized notation in comments.

## GRASSHOP PROJECT SPECIFICS
- This is the Grasshop project, a platform focused on learning and knowledge management.
- Key technologies include: React, Next.js, TypeScript, Supabase, and various modern web technologies.
- Follow TypeScript best practices, including proper typing and interface definitions.
- Consider mobile responsiveness in all UI implementations.
